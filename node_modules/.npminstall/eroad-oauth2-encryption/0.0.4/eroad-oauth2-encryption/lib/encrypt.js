const crypt = require('./helpers/crypt');
const md5 = require('./helpers/md5');
const sha256 = require('./helpers/sha256');

/**
 * 加密数据
 *
 * @param {Object} data 未加密的数据
 *
 * @param {String} key  密匙
 * 
 * @param {String} salt 标记
 *
 * @return {Object}  加密后的数据 
 *  {
 *      'summary' : 'string',
 *      'data': 'string'
 *   }
 * 
 */
function encrypt(data, key, salt) {
    let originalData = JSON.stringify(data);

    function encry(key){
        let dataI = encryOriginalData(originalData, key);
        let dataII = md5.hex_md5(dataI);
        let dataIII = md5.hex_md5(dataII + key + salt);

        encryData = {
            'summary' : dataIII,
            'data': dataI
        }
        return encryData;
    }

    function encryOriginalData(originalData, key) {
        originalData = originalData || '';

        let length = utf8_strlen(originalData),
            padLength = (16 - length % 16) % 16;

        for (var i = 0; i < padLength; i++) {
            originalData += ' ';
        }

        let srck = crypt.enc.Utf8.parse(key),
            srcs = crypt.enc.Utf8.parse(originalData),
            encrypted = crypt.AES.encrypt(srcs, srck, { mode: crypt.mode.ECB, padding: crypt.pad.ZeroPadding });

        return encrypted.toString();
    }
    
    function utf8_strlen(str) {
        var cnt = 0;
        for (var i = 0; i < str.length; i++) {
            var value = str.charCodeAt(i);
            if (value < 0x080) {
                cnt += 1;
            } else if (value < 0x0800) {
                cnt += 2;
            } else {
                cnt += 3;
            }
        }
        return cnt;
    }

    return encry(key);
}


module.exports = encrypt;